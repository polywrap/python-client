name: CD
on:
  # When Pull Request is merged
  pull_request_target:
    types: [closed]

jobs:
  GetVersion:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    outputs:
      version: ${{ env.RELEASE_VERSION }}
    if: |
      github.event.pull_request.user.login == 'polywrap-build-bot' &&
      github.event.pull_request.merged == true
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Halt release if CI failed
        run: exit 1
        if: ${{ github.event.workflow_run.conclusion == 'failure' }}
      - name: Read VERSION into env.RELEASE_VERSION
        run: echo RELEASE_VERSION=$(cat VERSION) >> $GITHUB_ENV
      - name: Check if tag Exists
        id: tag_check
        shell: bash -ex {0}
        run: |
          GET_API_URL="https://api.github.com/repos/${{github.repository}}/git/ref/tags/${{env.RELEASE_VERSION}}"
          http_status_code=$(curl -LI $GET_API_URL -o /dev/null -w '%{http_code}\n' -s \
            -H "Authorization: token ${GITHUB_TOKEN}")
          if [ "$http_status_code" -ne "404" ] ; then
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  Github-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs:
      - GetVersion
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: print version with needs
        run: echo ${{ needs.GetVersion.outputs.version }}
      - id: changelog
        name: "Generate release changelog"
        uses: heinrichreimer/github-changelog-generator-action@v2.3
        with:
          unreleasedOnly: true
          unreleasedLabel: ${{ needs.GetVersion.outputs.version }}
          token: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.GetVersion.outputs.version }}
          release_name: Release ${{ needs.GetVersion.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: true
          prerelease: false

  Dev-PR:
    needs: Pre-Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: dev

      - name: Merge main into dev
        run: |
          git config --global user.name '${{env.BUILD_BOT}}'
          git config --global user.email '${{ env.BUILD_BOT }}@users.noreply.github.com'
          git merge main

      - name: set env.RELEASE_FORKS to Release Forks' Organization
        run: echo RELEASE_FORKS=polywrap-release-forks >> $GITHUB_ENV

      - name: Set env.BUILD_BOT to Build Bot's Username
        run: echo BUILD_BOT=polywrap-build-bot >> $GITHUB_ENV

      - name: Read VERSION into env.RELEASE_VERSION
        run: echo RELEASE_VERSION=$(cat VERSION) >> $GITHUB_ENV

      - name: Building Dev PR...
        uses: actions/github-script@0.8.0
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '[Building Dev PR](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}) after Version (`${{env.RELEASE_VERSION}}`) Release.'
            })

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install tomlkit
        run: pip3 install tomlkit

      - name: Set Git Identity
        run: |
          git config --global user.name '${{env.BUILD_BOT}}'
          git config --global user.email '${{env.BUILD_BOT}}@users.noreply.github.com'
        env:
          GITHUB_TOKEN: ${{ secrets.POLYWRAP_BUILD_BOT_PAT }}

      - name: Link Packages in dev branch
        run: python3 scripts/link_packages.py

      - name: Create Pull Request
        id: cpr
        uses: peter-evans/create-pull-request@v3
        with:
          token: ${{ secrets.POLYWRAP_BUILD_BOT_PAT }}
          push-to-fork: ${{env.RELEASE_FORKS}}/${{github.event.pull_request.base.repo.name}}
          branch: release/origin-dev-${{env.RELEASE_VERSION}}
          base: dev
          committer: GitHub <noreply@github.com>
          author: ${{env.BUILD_BOT}} <${{env.BUILD_BOT}}@users.noreply.github.com>
          commit-message: "${{env.RELEASE_VERSION}}"
          title: 'Link packages in dev after (${{env.RELEASE_VERSION}})'
          body: |
            ## Link packages in dev after (${{env.RELEASE_VERSION}})

      - name: Release PR Created...
        uses: actions/github-script@0.8.0
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '**[Release PR Created](https://github.com/${{github.repository}}/pull/${{ steps.cpr.outputs.pull-request-number }}) (`${{env.RELEASE_VERSION}}`)**'
            })