"""
This type stub file was generated by pyright.
"""

from abc import abstractmethod
from dataclasses import dataclass
from typing import List, Optional, Union
from .env import Env
from .invoke import Invoker
from .uri import Uri
from .uri_resolver import IUriResolver
from .uri_resolver_handler import UriResolverHandler

@dataclass(slots=True, kw_only=True)
class ClientConfig:
    envs: Dict[Uri, Env: Dict[str, Any]] = field(default_factory=list)
    interfaces: Dict[Uri, List[Uri]]
    resolver: IUriResolver


@dataclass(slots=True, kw_only=True)
class Contextualized:
    context_id: Optional[str] = ...


@dataclass(slots=True, kw_only=True)
class GetEnvsOptions(Contextualized):
    ...


@dataclass(slots=True, kw_only=True)
class GetUriResolversOptions(Contextualized):
    ...


@dataclass(slots=True, kw_only=True)
class GetFileOptions(Contextualized):
    path: str
    encoding: Optional[str] = ...


class Client(Invoker, UriResolverHandler):
    @abstractmethod
    def get_envs(self, options: Optional[GetEnvsOptions] = ...) -> List[Env]:
        ...
    
    @abstractmethod
    def get_env_by_uri(self, uri: Uri, options: Optional[GetEnvsOptions] = ...) -> Union[Env, None]:
        ...
    
    @abstractmethod
    def get_uri_resolver(self, options: Optional[GetUriResolversOptions] = ...) -> List[IUriResolver]:
        ...
    
    @abstractmethod
    async def get_file(self, uri: Uri, options: GetFileOptions) -> Union[bytes, str]:
        ...
    


